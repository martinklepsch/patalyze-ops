; -*- mode: clojure; -*-
; vim: filetype=clojure

(logging/init {:file "/data/riemann.log"})

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host "0.0.0.0"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host}))

; Expire old events from the index every 5 seconds.
(periodically-expire 5)

(let [index (index)]
  ; Inbound events will be passed to these streams:
  (streams
    ; Index all events immediately.
    index

    (where (service "patalyze.bulk")
      #(info %))

    ; Calculate an overall rate of events.
    (with {:metric 1 :host nil :state "ok" :service "events/sec"}
      (rate 5 index))

    (where (and (service "patalyze.parse") (state "error"))
      #(info %)
      (with {:metric 1 :state "error" :service "parse-error/sec"}
        (rate 5 index)))

    (where (and (service "patalyze.parse") (state "ok"))
      #(info %)
      (with {:metric 1 :state "ok" :service "parse/sec"}
        (rate 5 index)))

    (where (service "patalyze.retrieval")
      (with {:metric 1 :state "ok" :service "downloads/sec"}
        (rate 1 index)))))
